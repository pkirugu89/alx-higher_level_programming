==================================
How to use 7-base_geometry.py
==================================

This python file has only one function named ''integer_validator()''.

Usage.
======
Returns True if num is an integer.
::
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bgeo = BaseGeometry()

Positive integers test.
::
	>>> bgeo.integer_validator("my_int", 12)

Errors.
======
The 'integer_validator()' will raise errors when a non-integer values or 
negative integer and NULL value is passed as parameter on the method.

Negative integer test.
::
	>>> bgeo.integer_validator("number", -12)
	Traceback (most recent call last):
	ValueError: number must be greater than 0

Infinite integer test.
::
	>>> bgeo.integer_validator("infnumbers", int('inf'))
	Traceback (most recent call last):
	  ...
	ValueError: invalid literal for int() with base 10: 'inf'

Printing the area.
::
	>>> bgeo.area()
	Traceback (most recent call last):
	   ...
	Exception: area() is not implemented

Passing one argument to integer_validator.
::
	>>> bgeo.integer_validator("age")
	Traceback (most recent call last):
	  ...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

Passing a zero value to integer_validator
::
	>>> bgeo.integer_validator("age", 0)
	Traceback (most recent call last):
	  ...
	ValueError: age must be greater than 0

Passing a tuple to integer_validator
::
	>>> bgeo.integer_validator("age", (4, ))
	Traceback (most recent call last):
	   ...
	TypeError: age must be an integer

Passing a boolean to integer_validator
::
	>>> bgeo.integer_validator("age", True)
	Traceback (most recent call last):
	  ...
	TypeError: age must be an integer

Passing a dictionary to integer_validator.
::
	>>> bgeo.integer_validator("age", {3, 4})
	Traceback (most recent call last):
	   ...
	TypeError: age must be an integer

Passing None value to integer_validator.
::
	>>> bgeo.integer_validator("age", None)
	Traceback (most recent call last):
	   ...
	TypeError: age must be an integer

Passing no value to integer_validator.
::
	>>> bgeo.integer_validator()
	Traceback (most recent call last):
	   ...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Passing a list to integer_validator.
::
	>>> bgeo.integer_validator("age", [3])
	Traceback (most recent call last):
	   ...
	TypeError: age must be an integer
